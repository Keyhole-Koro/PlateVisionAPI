name: Build and Deploy Lambda Container

on:
  push:
    branches:
      - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        env:
          IMAGE_TAG: latest
          IMAGE_SHA: ${{ github.sha }}
          ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          REGION: ${{ secrets.AWS_REGION }}
          REPO: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO

          docker build -f PlateVisionAPI/aws_lambda.Dockerfile -t $IMAGE_URI:$IMAGE_TAG .
          docker tag $IMAGE_URI:$IMAGE_TAG $IMAGE_URI:$IMAGE_SHA

          docker push $IMAGE_URI:$IMAGE_TAG
          docker push $IMAGE_URI:$IMAGE_SHA

      - name: Deploy to AWS Lambda
        env:
          FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          REGION: ${{ secrets.AWS_REGION }}
          REPO: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO:latest

          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --image-uri $IMAGE_URI
